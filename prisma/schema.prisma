// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            Int        @id @default(autoincrement())
  username      String     @unique
  email         String     @unique
  referralCode  String     @unique
  name          String
  password      String
  isVerified    Boolean
  profileImage  String?
  noTlp         String?
  gender        Gender?
  backAccount   String?
  bankName      String?
  accountHolder String?
  role          Role       @relation(fields: [roleName], references: [name])
  roleName      String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now())
  userRole      UserRole[]
}

enum Gender {
  MALE
  FEMALE
}

model Role {
  id    Int        @id @default(autoincrement())
  name  RoleName   @unique
  users UserRole[]
}

enum RoleName {
  CUSTOMER
  ORGANIZER
  ADMIN
}

model UserRole {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@unique([userId, roleId])
}

model Event {
  id          Int         @id @default(autoincrement())
  slug        String      @unique
  organizer   User        @relation(fields: [organizerId], references: [id])
  organizerId Int
  banner      String
  description String
  terms       String
  city        String
  province    String
  country     String
  latitude    Float? //lintang
  longitude   Float? //bujur
  category    Category
  eventStatus EventStatus
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
}

enum Category {
  MUSIC
  SPORTS
  CONFERENCE
  WORKSHOP
  FESTIVAL
  EXHIBITION
  THEATER
  COMEDY
  COMMUNITY
  EDUCATION
  BUSINESS
  TECHNOLOGY
  HEALTH
  LIFESTYLE
}

enum EventStatus {
  DRAFT
  ACTIVE
  ARCHIVED
  CANCELED
}

model TicketType {
  id          Int      @id @default(autoincrement())
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     Int
  name        String
  price       Int
  quota       Int
  description String?
  benefit     String?
  startSale   DateTime
  endSale     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Voucher {
  id        Int           @id @default(autoincrement())
  code      String        @unique
  event     Event         @relation(fields: [eventId], references: [id])
  eventId   Int
  discount  Int
  startDate DateTime
  endDate   DateTime
  status    VoucherStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum VoucherStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

model OrderItem {
  id            Int         @id @default(autoincrement())
  ticketType    TicketType  @relation(fields: [ticketTypeId], references: [id])
  ticketTypeId  Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int
  quantity      Int
  subTotal      Int
}

model Transaction {
  id             Int               @id @default(autoincrement())
  trasactionCode String            @unique
  user           User              @relation(fields: [customerId], references: [id])
  customerId     Int
  event          Event             @relation(fields: [eventId], references: [id])
  eventId        Int
  status         TransactionStatus
  paymentProof   String
  totalPrice     Int
  useCoupon      Boolean
  usePoint       Int
  expireAt       DateTime
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  orderItems     OrderItem[]
}

enum TransactionStatus {
  WAITING_PAYMENT
  WAITING_CONFIRMATION
  DONE
  REJECTED
}

model Review {
  id         Int      @id @default(autoincrement())
  event      Event    @relation(fields: [eventId], references: [id])
  eventId    Int
  user       User     @relation(fields: [customerId], references: [id])
  customerId Int
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Referral {
  id         Int  @id @default(autoincrement())
  referrer   User @relation("Referrer", fields: [referrerId], references: [id])
  referrerId Int
  referred   User @relation("Referred", fields: [referredId], references: [id])
  referredId Int  @unique //yang menerima 
}

model Coupon {
  id        Int       @id @default(autoincrement())
  discount  Int
  expiredAt DateTime
  isUsed    Boolean
  useAt     DateTime?
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
}

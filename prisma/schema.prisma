// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  email        String   @unique
  referralCode String   @unique
  name         String
  password     String
  isVerified   Boolean  @default(false)
  profileImage String?
  phone        String?
  gender       Gender?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  userRoles     UserRole[]
  organization  Organization? // sisi pasangan, cukup tulis relasi
  transactions  Transaction[]
  reviews       Review[]
  referralsMade Referral[]    @relation("Referrer")
  referralsGot  Referral?     @relation("Referred")
  coupons       Coupon[]
  points        Point[]
}

enum Gender {
  MALE
  FEMALE
}

model Role {
  id    Int        @id @default(autoincrement())
  name  RoleName   @unique
  users UserRole[]
}

enum RoleName {
  CUSTOMER
  ORGANIZER
  ADMIN
}

model UserRole {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId Int

  @@unique([userId, roleId])
}

model Organization {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  name          String
  description   String?
  photo         String?
  bankAccount   String?
  bankName      String?
  accountHolder String?
  phone         String?
  website       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  owner   User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId Int     @unique // enforce 1 user hanya punya 1 organization
  events  Event[]
}

model Event {
  id             Int           @id @default(autoincrement())
  slug           String        @unique
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId Int?
  banner         String
  description    String
  terms          String
  city           String
  province       String
  country        String
  latitude       Float?
  longitude      Float?
  category       Category
  eventStatus    EventStatus   @default(DRAFT)
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  tickets      TicketType[]
  vouchers     Voucher[]
  transactions Transaction[]
  reviews      Review[]
}

enum Category {
  MUSIC
  SPORTS
  CONFERENCE
  WORKSHOP
  FESTIVAL
  EXHIBITION
  THEATER
  COMEDY
  COMMUNITY
  EDUCATION
  BUSINESS
  TECHNOLOGY
  HEALTH
  LIFESTYLE
}

enum EventStatus {
  DRAFT
  ACTIVE
  ARCHIVED
  CANCELED
}

model TicketType {
  id          Int      @id @default(autoincrement())
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     Int
  name        String
  price       Int
  quota       Int
  description String?
  benefit     String?
  startSale   DateTime
  endSale     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems OrderItem[]
}

model Voucher {
  id        Int           @id @default(autoincrement())
  code      String        @unique
  event     Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   Int
  discount  Int
  startDate DateTime
  endDate   DateTime
  status    VoucherStatus @default(ACTIVE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum VoucherStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

model OrderItem {
  id            Int         @id @default(autoincrement())
  ticketType    TicketType  @relation(fields: [ticketTypeId], references: [id], onDelete: Cascade)
  ticketTypeId  Int
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId Int
  quantity      Int
  subTotal      Int
}

model Transaction {
  id              Int               @id @default(autoincrement())
  transactionCode String            @unique
  user            User              @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId      Int
  event           Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId         Int
  status          TransactionStatus @default(WAITING_PAYMENT)
  paymentProof    String?
  totalPrice      Int
  useCoupon       Boolean           @default(false)
  usePoint        Int               @default(0)
  expireAt        DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  orderItems OrderItem[]
}

enum TransactionStatus {
  WAITING_PAYMENT
  WAITING_CONFIRMATION
  DONE
  REJECTED
  EXPIRED
  CANCELED
}

model Review {
  id         Int      @id @default(autoincrement())
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId    Int
  user       User     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId Int
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([eventId, customerId])
}

model Referral {
  id         Int  @id @default(autoincrement())
  referrer   User @relation("Referrer", fields: [referrerId], references: [id], onDelete: Cascade)
  referrerId Int
  referred   User @relation("Referred", fields: [referredId], references: [id], onDelete: Cascade)
  referredId Int  @unique
}

model Coupon {
  id        Int       @id @default(autoincrement())
  discount  Int
  expiredAt DateTime
  isUsed    Boolean   @default(false)
  useAt     DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int       @unique
}

model Point {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  amount    Int
  type      PointType
  expiredAt DateTime
  useAt     DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum PointType {
  EARNED
  USED
}
